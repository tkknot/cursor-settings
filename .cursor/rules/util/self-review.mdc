---
description: 
globs: 
alwaysApply: false
---
Rule Name: util/self-review
Description: |
  # self-review ルール
  
  ## 概要
  
  このルールは、開発者がプルリクエストを作成する前に自身の変更内容を自動でチェックし、セルフレビューを効率良く行うための一連のフローを提供します。コードの品質、テスト、ドキュメント、コミット粒度などを網羅的に確認し、改善点を洗い出します。
  
  ---
  
  ## 使い方
  
  1. 変更をコミットした状態で対象ブランチにチェックアウトする。
  2. 以下のプロンプトを入力してください。
  
     > このブランチの変更をセルフレビューし、問題点と改善提案をまとめてください。
  
  これだけで、変更内容・影響範囲・チェックリスト・改善提案が自動生成されます。
  
  ---
  
  ## 実行フロー（自動化される処理）
  
  1. `git branch --show-current` で現在のブランチ名を取得。
  2. `git remote show origin | grep "HEAD branch"` でリモートのデフォルトブランチ名を取得。
  3. `git fetch origin` で最新のリモート情報を取得。
  4. `git diff origin/<default-branch>...HEAD` で差分を取得。
  5. `git log --oneline origin/<default-branch>..HEAD` でコミットログを取得。
  6. 取得した情報を基に、以下の観点でレビューを実施：
     - コード品質（可読性・重複・複雑度）
     - テスト（追加・更新・カバレッジ）
     - スタイル／フォーマット（lint, formatter）
     - セキュリティ・パフォーマンス
     - ドキュメント・コメント
     - コミットメッセージ粒度と内容
  
  ---
  
  ## 出力フォーマット
  
  1. **変更概要**
     - 主な変更点を箇条書きで列挙
  2. **影響範囲**
     - 変更が及ぶモジュール・機能・外部インターフェース
  3. **提案・改善点**
     - 優先度（高／中／低）を付けた改善案
  4. **次のアクション**
     - 修正が必要な場合の TODO リスト
  
  ---
  
  ## 追加チューニング
  
  - `gh` CLI が利用可能で PR が既に作成されている場合、`gh pr view` の結果を利用して PR テンプレートに沿ったセルフレビューコメントを生成できます。
  - CI が設定されているリポジトリでは、テスト・Lint の結果を自動で添付してレビュー精度を向上させます。
  - 言語やフレームワーク特有のチェック（型チェック、セキュリティツールなど）を追加しても構いません。
  
  ---
  
  ## 注意事項
  
  - **自動生成結果を鵜呑みにしない**: 必ず人間の目で最終確認を行ってください。
  - **機密情報の取り扱いに注意**: 差分に含まれるシークレットや個人情報を公開しないようにしてください。
  - **環境依存の差分に注意**: 改行コードや権限情報など OS 依存の差分が混入していないか確認してください。

