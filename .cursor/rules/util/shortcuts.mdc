---
alwaysApply: true
---

# ショートカットエイリアス

## コンサルティングコマンド
- `/ask`: "以下の問題について多角的な分析と具体的な提案を提供してください: [ISSUE]。
  分析は`@.cursor\rules\agent\researcher.mdc`
  提案を`@.cursor\rules\util\plan-mode.mdc`をそれぞれ利用して遂行してください。"

- `/plan`: "
  `@.cursor\rules\util\plan-mode.mdc`
  を呼び出してください。"

- `/summarize`: "与えられた指示や内容に従って要約してください [CONTENT]"

## デバッグと改善コマンド

- `/refactor`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従ってコードのリファクタリングを実施してください: [CODE]。"

## コメントコマンド

- `/cmt`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従ってコードのコメントを作成してください: [CODE]。"

- `/log`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従ってコードのログを作成してください: [CODE]。"

## コード品質コマンド
- `/test`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従ってコードのテストを作成してください: [CODE]。"

- `/review`: "
  PRのレビューは`@.cursor\rules\util\pr-review.mdc`
  その他のレビューは`@.cursor\rules\agent\text-reviewer.mdc`
  を呼び出してください
  "

## コード説明関連コマンド
- `/explain`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従ってコードを詳細に説明してください: [CODE]。"

- `/doc`: "`@.cursor\rules\agent\fullstack-programmer.mdc`の役割に従って`/explain`を実施した後、その内容で与えられたコードのドキュメントを作成してください: [CODE]。"

## Git操作コマンド
- `/commit`: "以下の変更をコミットします: [CHANGES]。
  以下を含むコミットメッセージを作成します:
  1) プレフィックスの選択
  2) 変更の要約（50文字以内）
  3) 詳細な変更の説明
  4) 関連する問題/チケット。
  変更を論理的なコミット単位に分割すべきかどうかを評価します。"

- `/checkout`: "ブランチの切り替えまたは作成: [BRANCH]。
  チェックアウト前のチェック:
  1) 現在の作業状態（コミットされていない変更）
  2) ブランチの存在確認
  3) リモートブランチの状態
  4) 新規作成の場合のベースブランチの選択。
  必要に応じてスタッシュの推奨事項と、チェックアウト後の手順を提供します。"

- `/push`: "以下の変更をリモートリポジトリにプッシュします: [BRANCH]。
  プッシュ前のチェック:
  1) コミットの論理性
  2) テスト実行結果
  3) コードレビューの状態
  4) コンフリクトの状態。
  リベースまたはスカッシュの必要性を評価します。"

- `/pull`: "リモートリポジトリから最新の変更を取得します: [BRANCH]。
  実行手順:
  1) ローカル作業状態の確認
  2) フェッチ戦略（マージ/リベース）の決定
  3) コンフリクト解決ポリシーの確認。
  コンフリクトが発生した場合の解決手順を提供します。"


## ダイアグラム作成コマンド
- `/draw`: "与えられた内容についての設計図をmermaidで作成してください: [CONTENT]。"

- `/slide`: `@.cursor\rules\util\marp-slides.mdc`を呼び出し、スライドの作成を開始してください"