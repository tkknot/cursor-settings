---
alwaysApply: false
---

# 高度テスト実践ガイド

## 概要
このガイドは、`@.cursor\rules\agent\fullstack-programmer.mdc` の拡張ファイルとして、基本的な単体テストを超えた高度なテスト手法を詳細に説明します。包括的なテスト戦略から具体的な実装まで、品質を保証するための実践的な手法を提供します。

## 高度なテスト設計原則

### テスト戦略の階層
```
□ 単体テスト（Unit Tests）: 個別の関数・メソッドの検証
□ 統合テスト（Integration Tests）: モジュール間の連携検証
□ エンドツーエンドテスト（E2E Tests）: ユーザーシナリオの完全検証
□ 契約テスト（Contract Tests）: API・サービス間の契約検証
□ パフォーマンステスト: 性能・負荷の検証
□ セキュリティテスト: 脆弱性・セキュリティホールの検証
```

### テスト駆動開発の高度化
TDDサイクルの実践手順：
- Red段階: パスワード暗号化を検証する失敗テストを作成（plaintext禁止、bcryptパターン検証）
- Green段階: テストを通す最小実装（bcrypt.hashSyncの直接利用）
- Refactor段階: 依存性注入・バリデーション・ID生成などの改善実装
- 各段階での品質向上: テスタビリティ・保守性・拡張性の向上

## テスト構造化・パターン

### AAA（Arrange-Act-Assert）の拡張
高度なAAAパターンの実践：
- Arrange段階: モックサービス準備（税金・割引計算）、テストデータ設定、依存性注入
- Act段階: 注文合計計算の実際処理実行
- Assert段階: 小計・税金・割引・合計の個別検証
- Cleanup段階: モック復元によるテスト間の独立性確保
- モック活用: 外部依存を制御して確定的なテスト実行

### Given-When-Then with BDD
BDD（振る舞い駆動開発）のテスト構造：
- Given（前提条件）: 既存ユーザーの設定、モックリポジトリの準備、認証サービスの初期化
- When（実行条件）: ログインリクエストの実行、有効な認証情報の送信
- Then（期待結果）: 認証成功・トークン生成・ユーザー情報返却・パスワード非表示の検証
- BDDの利点: 業務要件と直結したテスト記述、ステークホルダーとの共通理解
- セキュリティ考慮: レスポンスでのパスワード情報除外確認

## モック・スタブの高度な活用

### 依存性注入とモック戦略
外部依存を持つサービスのテスト戦略：
- サービス設計: PaymentGateway・Logger・Configの依存性注入による疎結合設計
- モック準備: 各依存関係の偽実装をbeforeEachで統一セットアップ
- 成功シナリオ: 正常な決済処理の検証（パラメータ・ログ・戻り値の確認）
- エラーシナリオ: 決済ゲートウェイエラー時の例外処理・ログ出力検証
- テスト独立性: モックによる外部依存の完全制御

### スパイとモックの使い分け
テストダブルの効果的な使い分け：
- Spy（スパイ）: 実際の実装を呼び出しつつ呼び出し回数・引数を監視（実装の動作確認）
- Mock（モック）: 完全に偽の実装で依存関係を置き換え（制御された動作）
- 使い分け基準: 実装の動作確認が必要ならSpy、完全に制御したい場合はMock
- 適用例: バリデーション呼び出し確認（Spy）、エラー条件テスト（Mock）

## 統合テスト戦略

### データベース統合テスト
データベース統合テストの実装戦略：
- セットアップ: テスト専用データベース接続・テーブル作成・リポジトリ初期化
- データクリーンアップ: 各テスト前のTRUNCATE実行によるデータ初期化
- 基本CRUD: ユーザー作成・取得の正常系テスト
- 制約テスト: メール一意制約の検証・重複エラーハンドリング
- ティアダウン: テスト完了後のテーブル削除・接続クローズ

### API統合テスト
APIエンドポイント統合テストの手法：
- サーバーセットアップ: ランダムポートでのテスト用サーバー起動
- 認証準備: テスト用ユーザーログイン・トークン取得
- 正常系テスト: 認証付き注文作成・レスポンス構造検証
- 認証テスト: 未認証リクエストの401エラー確認
- クリーンアップ: テスト完了後のサーバークローズ

## パフォーマンステスト

### 負荷テストの実装
パフォーマンステストの実装アプローチ：
- 大量データ処理: 10,000件データの処理時間測定（1秒以内の目標）
- 並行処理: 100並行リクエストの実行時間測定（2秒以内の目標）
- 測定方法: Date.now()による実行時間計測
- 閾値設定: 許容可能な処理時間の明確な基準設定
- 結果検証: 処理時間と結果件数の両方を検証

### メモリ使用量テスト
メモリリーク検出テストの手法：
- 初期状態: process.memoryUsage()でヒープ使用量の基準測定
- 負荷実行: 1000回の繰り返し処理によるメモリ負荷
- ガベージコレクション: global.gcによる強制的なメモリ回収
- 最終測定: 処理後のヒープ使用量測定・増加量計算
- 閾値判定: 10MB未満の増加を許容範囲として設定

## エンドツーエンドテスト

### ブラウザ自動化テスト（Playwright）
E2Eユーザージャーニーテストの実装：
- ユーザー登録: フォーム入力・送信・成功確認の自動化
- 商品検索: 検索機能・結果表示の動作確認
- ショッピング: 商品選択・カート追加・チェックアウトフローの検証
- 決済処理: 支払い情報入力・注文完了の確認
- 結果検証: 注文番号生成・確認画面表示の検証
- 実用性: 実際のユーザー操作パターンの再現

### APIエンドツーエンドテスト
APIワークフロー統合テストの構成：
- ユーザー作成: 新規ユーザー登録・ユーザーID取得
- 認証: ログイン・トークン取得・後続リクエストでの認証ヘッダー設定
- 商品取得: 商品一覧API・購入対象商品の選択
- 注文作成: 注文API・注文ID取得・ステータス確認
- 決済処理: 支払いAPI・決済完了ステータス確認
- 完了確認: 注文ステータス更新の検証

## テストデータ管理

### ファクトリーパターン
テストデータファクトリーの実装アプローチ：
- 基本ファクトリー: ランダムID・ユニークメール・デフォルト値を含む標準ユーザー生成
- 専門ファクトリー: 管理者ユーザー（権限付き）・非アクティブユーザー等の特化型
- オーバーライド機能: 必要に応じてデフォルト値を上書き可能
- 使用例: 非アクティブユーザーの有効化テスト・状態変更の検証
- 利点: 一貫したテストデータ・保守性の向上・テスト記述の簡潔化

### フィクスチャーデータ
フィクスチャーデータ管理の手法：
- JSON定義: 標準ユーザー・管理者ユーザー等の固定テストデータ
- データ構造: メール・名前・ロール等の基本属性定義
- テスト利用: フィクスチャーの読み込み・ID追加による実行可能データ作成
- 管理操作: 管理者権限が必要な機能のテスト実行
- 利点: 再利用可能な標準データ・テスト間の一貫性確保

## セキュリティテスト

### 入力検証テスト
セキュリティ脆弱性テストの実装：
- SQLインジェクション対策: 悪意のあるSQL文の挿入・実行結果の安全性確認
- XSS攻撃対策: スクリプトタグ注入・HTMLエスケープ処理の検証
- データベース保護: 攻撃後のデータ整合性・テーブル存在確認
- サニタイゼーション: 危険文字の適切なエスケープ処理確認
- 防御確認: 攻撃コードの無効化・正常処理継続の検証

### 認証・認可テスト
認証・認可のセキュリティテストの実装方針：
- **パスワード強度テスト**: 一般的な弱いパスワード（password、123456、qwerty等）での登録拒否確認
- **ブルートフォース攻撃対策**: 連続ログイン失敗後のアカウントロック機能検証
- **セッション管理**: 不正なトークン・期限切れセッションの適切な拒否確認
- **権限チェック**: 管理者機能への一般ユーザーアクセス拒否検証
- **攻撃シナリオ**: 複数回の失敗試行後の正常認証情報でもロックされることを確認

## テスト実行効率化

### 並列実行の最適化
テスト実行の並列化設定とパフォーマンス最適化の手法：
- **ワーカー数調整**: システムCPUの50%を並列実行に割り当て（maxWorkers設定）
- **テストファイル分類**: src配下の単体テスト・tests配下の統合テストの自動識別
- **共通セットアップ**: 各テスト環境での事前準備スクリプトの統一実行
- **カバレッジ計測**: テストファイル・設定ファイルを除外した実装コードのみの測定
- **プロジェクト分離**: 単体テスト・統合テストの独立実行環境構築
- **環境別設定**: テストタイプごとの異なるセットアップ・実行条件設定

### テストの分類・実行制御
テストカテゴリー分類とタグベース実行制御の手法：
- **タグベース分類**: @unit（単体）・@integration（統合）・@slow（パフォーマンス）等の識別タグ
- **階層構造**: サービス単位でのネストしたdescribeブロックによるテスト整理
- **選択実行**: testNamePatternオプションによる特定カテゴリーのみの実行制御
- **開発段階別**: 開発中は@unitのみ、CI/CDでは全テスト実行の使い分け
- **実行時間管理**: @slowタグで時間のかかるテストを分離・必要時のみ実行
- **環境依存**: データベース接続が必要な@integrationテストの環境別実行

## 継続的テスト改善

### テストメトリクス監視
カバレッジ測定・品質メトリクス監視の自動化手法：
- **カバレッジ報告**: 行カバレッジ・関数カバレッジ・分岐カバレッジ・文カバレッジの総合測定
- **閾値管理**: 行カバレッジ80%等の品質基準設定・基準未達時のビルド失敗
- **レポート生成**: テスト実行後の自動レポート生成・継続的な品質監視
- **トレンド分析**: カバレッジの推移追跡・品質低下の早期検出
- **ダッシュボード**: 視覚的なメトリクス表示・チーム全体での品質状況共有
- **アラート設定**: 品質基準低下時の自動通知・即座の改善アクション促進

### テスト品質評価
```
□ カバレッジ率: 行・関数・分岐の網羅率
□ 実行時間: テストスイートの実行速度
□ 安定性: テストの成功率・フレーキネス
□ 保守性: テストコードの可読性・更新容易性
□ 有効性: バグ検出率・回帰防止効果
```

## 参考リソース

### 関連ファイル
- メインルール: `@.cursor\rules\agent\fullstack-programmer.mdc`
- ログ実装: `@.cursor\rules\agent\fullstack-extensions\logging-guidelines.mdc`
- 文書化: `@.cursor\rules\agent\fullstack-extensions\documentation-standards.mdc`
- リファクタリング: `@.cursor\rules\agent\fullstack-extensions\refactoring-cookbook.mdc`

### 推奨フレームワーク・ツール
- **JavaScript**: Jest, Mocha, Playwright, Cypress
- **Java**: JUnit 5, Mockito, TestContainers
- **Python**: pytest, unittest, mock
- **API Testing**: Postman, Newman, REST Assured
- **Performance**: Artillery, k6, JMeter
- **E2E**: Selenium, Playwright, Cypress
# 高度テスト実践ガイド

## 概要
このガイドは、`@.cursor\rules\agent\fullstack-programmer.mdc` の拡張ファイルとして、基本的な単体テストを超えた高度なテスト手法を詳細に説明します。包括的なテスト戦略から具体的な実装まで、品質を保証するための実践的な手法を提供します。

## 高度なテスト設計原則

### テスト戦略の階層
```
□ 単体テスト（Unit Tests）: 個別の関数・メソッドの検証
□ 統合テスト（Integration Tests）: モジュール間の連携検証
□ エンドツーエンドテスト（E2E Tests）: ユーザーシナリオの完全検証
□ 契約テスト（Contract Tests）: API・サービス間の契約検証
□ パフォーマンステスト: 性能・負荷の検証
□ セキュリティテスト: 脆弱性・セキュリティホールの検証
```

### テスト駆動開発の高度化
TDDサイクルの実践手順：
- Red段階: パスワード暗号化を検証する失敗テストを作成（plaintext禁止、bcryptパターン検証）
- Green段階: テストを通す最小実装（bcrypt.hashSyncの直接利用）
- Refactor段階: 依存性注入・バリデーション・ID生成などの改善実装
- 各段階での品質向上: テスタビリティ・保守性・拡張性の向上

## テスト構造化・パターン

### AAA（Arrange-Act-Assert）の拡張
高度なAAAパターンの実践：
- Arrange段階: モックサービス準備（税金・割引計算）、テストデータ設定、依存性注入
- Act段階: 注文合計計算の実際処理実行
- Assert段階: 小計・税金・割引・合計の個別検証
- Cleanup段階: モック復元によるテスト間の独立性確保
- モック活用: 外部依存を制御して確定的なテスト実行

### Given-When-Then with BDD
BDD（振る舞い駆動開発）のテスト構造：
- Given（前提条件）: 既存ユーザーの設定、モックリポジトリの準備、認証サービスの初期化
- When（実行条件）: ログインリクエストの実行、有効な認証情報の送信
- Then（期待結果）: 認証成功・トークン生成・ユーザー情報返却・パスワード非表示の検証
- BDDの利点: 業務要件と直結したテスト記述、ステークホルダーとの共通理解
- セキュリティ考慮: レスポンスでのパスワード情報除外確認

## モック・スタブの高度な活用

### 依存性注入とモック戦略
外部依存を持つサービスのテスト戦略：
- サービス設計: PaymentGateway・Logger・Configの依存性注入による疎結合設計
- モック準備: 各依存関係の偽実装をbeforeEachで統一セットアップ
- 成功シナリオ: 正常な決済処理の検証（パラメータ・ログ・戻り値の確認）
- エラーシナリオ: 決済ゲートウェイエラー時の例外処理・ログ出力検証
- テスト独立性: モックによる外部依存の完全制御

### スパイとモックの使い分け
テストダブルの効果的な使い分け：
- Spy（スパイ）: 実際の実装を呼び出しつつ呼び出し回数・引数を監視（実装の動作確認）
- Mock（モック）: 完全に偽の実装で依存関係を置き換え（制御された動作）
- 使い分け基準: 実装の動作確認が必要ならSpy、完全に制御したい場合はMock
- 適用例: バリデーション呼び出し確認（Spy）、エラー条件テスト（Mock）

## 統合テスト戦略

### データベース統合テスト
データベース統合テストの実装戦略：
- セットアップ: テスト専用データベース接続・テーブル作成・リポジトリ初期化
- データクリーンアップ: 各テスト前のTRUNCATE実行によるデータ初期化
- 基本CRUD: ユーザー作成・取得の正常系テスト
- 制約テスト: メール一意制約の検証・重複エラーハンドリング
- ティアダウン: テスト完了後のテーブル削除・接続クローズ

### API統合テスト
APIエンドポイント統合テストの手法：
- サーバーセットアップ: ランダムポートでのテスト用サーバー起動
- 認証準備: テスト用ユーザーログイン・トークン取得
- 正常系テスト: 認証付き注文作成・レスポンス構造検証
- 認証テスト: 未認証リクエストの401エラー確認
- クリーンアップ: テスト完了後のサーバークローズ

## パフォーマンステスト

### 負荷テストの実装
パフォーマンステストの実装アプローチ：
- 大量データ処理: 10,000件データの処理時間測定（1秒以内の目標）
- 並行処理: 100並行リクエストの実行時間測定（2秒以内の目標）
- 測定方法: Date.now()による実行時間計測
- 閾値設定: 許容可能な処理時間の明確な基準設定
- 結果検証: 処理時間と結果件数の両方を検証

### メモリ使用量テスト
メモリリーク検出テストの手法：
- 初期状態: process.memoryUsage()でヒープ使用量の基準測定
- 負荷実行: 1000回の繰り返し処理によるメモリ負荷
- ガベージコレクション: global.gcによる強制的なメモリ回収
- 最終測定: 処理後のヒープ使用量測定・増加量計算
- 閾値判定: 10MB未満の増加を許容範囲として設定

## エンドツーエンドテスト

### ブラウザ自動化テスト（Playwright）
E2Eユーザージャーニーテストの実装：
- ユーザー登録: フォーム入力・送信・成功確認の自動化
- 商品検索: 検索機能・結果表示の動作確認
- ショッピング: 商品選択・カート追加・チェックアウトフローの検証
- 決済処理: 支払い情報入力・注文完了の確認
- 結果検証: 注文番号生成・確認画面表示の検証
- 実用性: 実際のユーザー操作パターンの再現

### APIエンドツーエンドテスト
APIワークフロー統合テストの構成：
- ユーザー作成: 新規ユーザー登録・ユーザーID取得
- 認証: ログイン・トークン取得・後続リクエストでの認証ヘッダー設定
- 商品取得: 商品一覧API・購入対象商品の選択
- 注文作成: 注文API・注文ID取得・ステータス確認
- 決済処理: 支払いAPI・決済完了ステータス確認
- 完了確認: 注文ステータス更新の検証

## テストデータ管理

### ファクトリーパターン
テストデータファクトリーの実装アプローチ：
- 基本ファクトリー: ランダムID・ユニークメール・デフォルト値を含む標準ユーザー生成
- 専門ファクトリー: 管理者ユーザー（権限付き）・非アクティブユーザー等の特化型
- オーバーライド機能: 必要に応じてデフォルト値を上書き可能
- 使用例: 非アクティブユーザーの有効化テスト・状態変更の検証
- 利点: 一貫したテストデータ・保守性の向上・テスト記述の簡潔化

### フィクスチャーデータ
フィクスチャーデータ管理の手法：
- JSON定義: 標準ユーザー・管理者ユーザー等の固定テストデータ
- データ構造: メール・名前・ロール等の基本属性定義
- テスト利用: フィクスチャーの読み込み・ID追加による実行可能データ作成
- 管理操作: 管理者権限が必要な機能のテスト実行
- 利点: 再利用可能な標準データ・テスト間の一貫性確保

## セキュリティテスト

### 入力検証テスト
セキュリティ脆弱性テストの実装：
- SQLインジェクション対策: 悪意のあるSQL文の挿入・実行結果の安全性確認
- XSS攻撃対策: スクリプトタグ注入・HTMLエスケープ処理の検証
- データベース保護: 攻撃後のデータ整合性・テーブル存在確認
- サニタイゼーション: 危険文字の適切なエスケープ処理確認
- 防御確認: 攻撃コードの無効化・正常処理継続の検証

### 認証・認可テスト
認証・認可のセキュリティテストの実装方針：
- **パスワード強度テスト**: 一般的な弱いパスワード（password、123456、qwerty等）での登録拒否確認
- **ブルートフォース攻撃対策**: 連続ログイン失敗後のアカウントロック機能検証
- **セッション管理**: 不正なトークン・期限切れセッションの適切な拒否確認
- **権限チェック**: 管理者機能への一般ユーザーアクセス拒否検証
- **攻撃シナリオ**: 複数回の失敗試行後の正常認証情報でもロックされることを確認

## テスト実行効率化

### 並列実行の最適化
テスト実行の並列化設定とパフォーマンス最適化の手法：
- **ワーカー数調整**: システムCPUの50%を並列実行に割り当て（maxWorkers設定）
- **テストファイル分類**: src配下の単体テスト・tests配下の統合テストの自動識別
- **共通セットアップ**: 各テスト環境での事前準備スクリプトの統一実行
- **カバレッジ計測**: テストファイル・設定ファイルを除外した実装コードのみの測定
- **プロジェクト分離**: 単体テスト・統合テストの独立実行環境構築
- **環境別設定**: テストタイプごとの異なるセットアップ・実行条件設定

### テストの分類・実行制御
テストカテゴリー分類とタグベース実行制御の手法：
- **タグベース分類**: @unit（単体）・@integration（統合）・@slow（パフォーマンス）等の識別タグ
- **階層構造**: サービス単位でのネストしたdescribeブロックによるテスト整理
- **選択実行**: testNamePatternオプションによる特定カテゴリーのみの実行制御
- **開発段階別**: 開発中は@unitのみ、CI/CDでは全テスト実行の使い分け
- **実行時間管理**: @slowタグで時間のかかるテストを分離・必要時のみ実行
- **環境依存**: データベース接続が必要な@integrationテストの環境別実行

## 継続的テスト改善

### テストメトリクス監視
カバレッジ測定・品質メトリクス監視の自動化手法：
- **カバレッジ報告**: 行カバレッジ・関数カバレッジ・分岐カバレッジ・文カバレッジの総合測定
- **閾値管理**: 行カバレッジ80%等の品質基準設定・基準未達時のビルド失敗
- **レポート生成**: テスト実行後の自動レポート生成・継続的な品質監視
- **トレンド分析**: カバレッジの推移追跡・品質低下の早期検出
- **ダッシュボード**: 視覚的なメトリクス表示・チーム全体での品質状況共有
- **アラート設定**: 品質基準低下時の自動通知・即座の改善アクション促進

### テスト品質評価
```
□ カバレッジ率: 行・関数・分岐の網羅率
□ 実行時間: テストスイートの実行速度
□ 安定性: テストの成功率・フレーキネス
□ 保守性: テストコードの可読性・更新容易性
□ 有効性: バグ検出率・回帰防止効果
```

## 参考リソース

### 関連ファイル
- メインルール: `@.cursor\rules\agent\fullstack-programmer.mdc`
- ログ実装: `@.cursor\rules\agent\fullstack-extensions\logging-guidelines.mdc`
- 文書化: `@.cursor\rules\agent\fullstack-extensions\documentation-standards.mdc`
- リファクタリング: `@.cursor\rules\agent\fullstack-extensions\refactoring-cookbook.mdc`

### 推奨フレームワーク・ツール
- **JavaScript**: Jest, Mocha, Playwright, Cypress
- **Java**: JUnit 5, Mockito, TestContainers
- **Python**: pytest, unittest, mock
- **API Testing**: Postman, Newman, REST Assured
- **Performance**: Artillery, k6, JMeter
- **E2E**: Selenium, Playwright, Cypress
