---
description: 
globs: 
alwaysApply: false
---
# 仕様書作成ガイドライン

このルールは、仕様書や要件定義書を作成する際のガイドラインを提供します。

## 作成場所
`.cursor/rules/spec`にmdcファイルを作成してください

## 仕様書の基本構造

### 1. 概要セクション
```markdown
# [プロジェクト名] 仕様書

## 1. 概要
### 1.1 目的
- [プロジェクトの目的]
- [解決したい課題]

### 1.2 スコープ
- [対象範囲]
- [対象外範囲]

### 1.3 前提条件
- [技術的前提]
- [環境的前提]
- [制約条件]
```

### 2. システム要件セクション
```markdown
## 2. システム要件
### 2.1 機能要件
#### 2.1.1 [機能名1]
- **概要**: [機能の概要]
- **入力**: [入力データ・条件]
- **処理**: [実行される処理]
- **出力**: [出力データ・結果]
- **例外処理**: [エラー時の処理]

#### 2.1.2 [機能名2]
- **概要**: [機能の概要]
- **入力**: [入力データ・条件]
- **処理**: [実行される処理]
- **出力**: [出力データ・結果]
- **例外処理**: [エラー時の処理]

### 2.2 非機能要件
- **パフォーマンス**: [レスポンス時間、スループット]
- **可用性**: [稼働時間要件]
- **セキュリティ**: [セキュリティ要件]
- **拡張性**: [スケーラビリティ要件]
- **保守性**: [メンテナンス要件]
```

### 3. 技術仕様セクション
```markdown
## 3. 技術仕様
### 3.1 アーキテクチャ
- **全体構成**: [システム全体の構成図]
- **コンポーネント構成**: [各コンポーネントの役割]
- **データフロー**: [データの流れ]

### 3.2 技術スタック
- **フロントエンド**: [使用技術・フレームワーク]
- **バックエンド**: [使用技術・フレームワーク]
- **データベース**: [DBMS・設計方針]
- **インフラ**: [サーバー・クラウド環境]

### 3.3 API仕様
#### 3.3.1 [API名1]
- **エンドポイント**: `[HTTP Method] /api/path`
- **リクエスト**: [パラメータ・ボディ]
- **レスポンス**: [正常時・エラー時のレスポンス]
- **認証**: [認証方式]
```

### 4. データ仕様セクション
```markdown
## 4. データ仕様
### 4.1 データモデル
#### 4.1.1 [エンティティ名1]
| 項目名 | 型 | 必須 | 制約 | 説明 |
|--------|----|----|------|------|
| id | integer | ○ | PK, AUTO_INCREMENT | ID |
| name | varchar(100) | ○ | NOT NULL | 名前 |
| created_at | timestamp | ○ | DEFAULT CURRENT_TIMESTAMP | 作成日時 |

### 4.2 データフロー
- **入力データ**: [データソース・形式]
- **変換処理**: [データ変換ロジック]
- **出力データ**: [データの出力先・形式]
```

## 仕様書作成のベストプラクティス

### 明確性を重視する
- 曖昧な表現を避け、具体的で明確な記述にする
- 数値や基準は明確に記載する
- 用語集を作成し、定義を統一する

### 完全性を確保する
- すべての機能と要件を網羅する
- 例外ケースやエラーケースも含める
- 依存関係や制約を明記する

### 追跡可能性を保つ
- 要件と実装の対応関係を明確にする
- 変更履歴を記録する
- 承認プロセスを文書化する

### レビュー可能性を考慮する
- 構造化された読みやすい形式にする
- 図表を適切に使用する
- チェックリストを含める

## 仕様書テンプレート

### 機能仕様テンプレート
```markdown
# [機能名] 仕様書

## 機能概要
[機能の概要と目的]

## ユースケース
### 基本フロー
1. [ステップ1]
2. [ステップ2]
3. [ステップ3]

### 代替フロー
- **条件**: [条件]
- **処理**: [処理内容]

### 例外フロー
- **エラー条件**: [エラー条件]
- **エラー処理**: [エラー時の処理]

## 入出力仕様
### 入力
- **データ形式**: [JSON/XML/etc]
- **パラメータ**: [必須/任意パラメータ]
- **バリデーション**: [入力値検証ルール]

### 出力
- **データ形式**: [レスポンス形式]
- **成功時**: [正常レスポンス]
- **エラー時**: [エラーレスポンス]

## 業務ルール
- [ビジネスルール1]
- [ビジネスルール2]
- [制約条件]

## テスト条件
### 正常系テスト
- [テストケース1]
- [テストケース2]

### 異常系テスト
- [エラーテストケース1]
- [エラーテストケース2]

### 境界値テスト
- [境界値テストケース]
```

## ファイルの作成・命名規則

仕様書ファイルを作成する際は、以下の命名規則に従って、`.cursor/rules/spec`にファイルを作成し、追加してください：

### 仕様書ファイル
- **機能仕様**: `spec-[機能名].mdc`
- **API仕様**: `spec-api-[API名].mdc`
- **データ仕様**: `spec-data-[データ名].mdc`
- **システム仕様**: `spec-system-[システム名].mdc`

### 要件定義ファイル
- **機能要件**: `spec-requirements-functional.mdc`
- **非機能要件**: `spec-requirements-nonfunctional.mdc`
- **業務要件**: `spec-requirements-business.mdc`

## チェックリスト

仕様書作成時に確認すべき項目：

### 完全性チェック
- [ ] すべての機能要件が記載されているか
- [ ] 非機能要件が明記されているか
- [ ] 例外処理が定義されているか
- [ ] 依存関係が明確になっているか

### 明確性チェック
- [ ] 曖昧な表現がないか
- [ ] 用語の定義が統一されているか
- [ ] 具体的な数値基準が記載されているか
- [ ] 図表が適切に使用されているか

### 一貫性チェック
- [ ] 他の仕様書との整合性が取れているか
- [ ] データモデルに矛盾がないか
- [ ] APIの命名規則が統一されているか

## 参考リソース

仕様書作成時に参考にすべきファイル：
- [README.md](mdc:obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/README.md): プロジェクト概要
- [package.json](mdc:obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/obsidian-repo/package.json): 技術情報
- 既存の仕様書やドキュメント
