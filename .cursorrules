# Language Settings
All messages required in Japanese.

# Git Rules
## command
- Always add --no-pager when running Git commands
- Do not push to remote until instructed
## commit-prefixes:
- feat: "Adding new features or modifying functionality"
  - feat(ui): "UIコンポーネントや視覚的な機能の追加・変更"
  - feat(api): "APIエンドポイントやバックエンド機能の追加・変更"
  - feat(auth): "認証・認可関連の機能追加・変更"
  - feat(perf): "パフォーマンス向上のための機能追加"
- fix: "Bug fixes or typo corrections"
  - fix(bug): "バグ修正"
  - fix(typo): "タイプミスの修正"
  - fix(security): "セキュリティ関連の修正"
  - fix(deps): "依存関係の問題修正"
- docs: "Adding documentation"
  - docs(api): "API仕様書の更新"
  - docs(readme): "READMEの更新"
  - docs(comment): "コードコメントの追加・更新"
  - docs(example): "サンプルコードの追加・更新"
- style: "Formatting changes, import order adjustments, or adding comments"
  - style(format): "コードフォーマットの調整"
  - style(lint): "リンターの警告修正"
  - style(import): "インポート順序の調整"
  - style(css): "CSSスタイルの調整"
- refactor: "Code refactoring without affecting functionality"
  - refactor(arch): "アーキテクチャの改善"
  - refactor(perf): "パフォーマンス改善のためのリファクタリング"
  - refactor(clean): "コードクリーンアップ"
  - refactor(test): "テストコードのリファクタリング"
- test: "Adding or modifying tests"
  - test(unit): "ユニットテストの追加・修正"
  - test(e2e): "E2Eテストの追加・修正"
  - test(int): "統合テストの追加・修正"
  - test(perf): "パフォーマンステストの追加・修正"
- ci: "Changes related to CI/CD"
  - ci(build): "ビルドプロセスの変更"
  - ci(deploy): "デプロイメント設定の変更"
  - ci(pipeline): "CIパイプラインの変更"
  - ci(action): "GitHub Actionsの変更"
- docker: "Modifications to Dockerfile or container-related changes"
  - docker(base): "ベースイメージの変更"
  - docker(config): "Docker設定の変更"
  - docker(compose): "Docker Compose設定の変更"
  - docker(opt): "Dockerの最適化"
- chore: "Miscellaneous changes"
  - chore(deps): "依存関係の更新"
  - chore(release): "リリース関連の変更"
  - chore(config): "設定ファイルの変更"
  - chore(tools): "開発ツールの変更"
- init: "プロジェクトの初期化やセットアップ"
- build: "ビルドシステムや外部依存関係の変更"
- perf: "パフォーマンス改善のための変更"
- revert: "以前のコミットの取り消し"
- i18n: "国際化対応の変更"
- a11y: "アクセシビリティ対応の変更"
- security: "セキュリティ関連の変更"

# Development Flow
## feature_development_steps
1. Execute initialization commands (e.g., bun init, uv init)
2. Initialize git
3. Verify and create the recommended directory structure if missing
4. Install required libraries
5. Confirm readiness to start development using commands
## bug_fix_steps
1. Carefully investigate affected areas
2. Create a new branch
3. Implement the changes
4. Run tests
5. Fix any failing tests
6. Commit once tests pass
7. Merge the branch
8. Delete the branch after merging

# Directory Structure
## recommend_directory_structure
- src
- docs
- tests
- assets (Includes project icons,demo,slides,etc.)
- .env
- .env.example
- .gitignore
- .gitattributes
- README.md
- experiment.ts(or experiment.py or experiment.rs etc....): You can use this file to experiment with code.

# TypeScript Rules
## recommendations
- use bun as a package manager & runtime
- Configure baseUrl as '.' and paths to use '@/*' alias for 'src/*' directory imports

# Shortcut Aliases
- `/ask`: The user is requesting consultation on a policy decision. Provide a proactive response with a multi-faceted analysis. Unless given clear instructions, do not execute any tasks during the consultation.
- `/plan`: Clearly and thoroughly outline a work plan and confirm there are no discrepancies. Proceed with execution only after reaching an agreement.
- `/debug`: Identify the root cause of a bug. List 5-7 possible causes and narrow them down to 1-2. Utilize logs to validate hypotheses before applying fixes.
- `/cmt`: Add appropriate comments and documentation to clarify the intent of the given code. Follow the existing code formatting.
- `/log`: Consider the appropriate log level and record only necessary information. Design logs to be concise and avoid redundancy. Follow the existing code formatting.